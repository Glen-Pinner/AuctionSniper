{
  "name": "mocha-casperjs",
  "description": "Write CasperJS tests using Mocha",
  "keywords": [
    "mocha",
    "casperjs",
    "bdd",
    "phantomjs",
    "testing"
  ],
  "version": "0.4.1",
  "author": {
    "name": "Nathan Black",
    "email": "nathan@nathanblack.org"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/nathanboktae/mocha-casperjs"
  },
  "readmeFilename": "README.md",
  "bugs": {
    "url": "http://github.com/nathanboktae/mocha-casperjs/issues"
  },
  "main": "mocha-casperjs.js",
  "bin": {
    "mocha-casperjs": "./bin/mocha-casperjs"
  },
  "peerDependency": {
    "mocha": ">= 1.14.0",
    "casperjs": ">= 1.1.0-beta3"
  },
  "devDependencies": {
    "chai": "1.8.1",
    "coffee-script": "1.7.x",
    "casper-chai": ">= 0.1.6",
    "mocha": ">= 1.12.0",
    "casperjs": "git://github.com/n1k0/casperjs.git#master"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha test/all.coffee"
  },
  "directories": {
    "test": "test"
  },
  "readme": "# CasperJS automation via Mocha [![Build Status](https://secure.travis-ci.org/nathanboktae/mocha-casperjs.png?branch=master)](https://travis-ci.org/nathanboktae/mocha-casperjs)\n\nCombine the power of [casperjs][]' automation with [Mocha][]'s robust testing framework features\n\n## Features\n- automatically load Casper, Mocha, and optionally [chai][] and [casper-chai][]\n- automatically run your Casper steps after each test\n- use any Mocha reporter that can run in the [phantomjs][] or [slimerjs][] environment\n\nFor example, let's rewrite Casper's [google testing example](http://docs.casperjs.org/en/latest/testing.html#browser-tests)\n\n````javascript\ndescribe('Google searching', function() {\n  before(function() {\n    casper.start('http://www.google.fr/')\n  })\n\n  it('should retrieve 10 or more results', function() {\n    casper.then(function() {\n      'Google'.should.matchTitle\n      'form[action=\"/search\"]'.should.be.inDOM.and.be.visible\n      this.fill('form[action=\"/search\"]', {\n        q: 'casperjs'\n      }, true)\n    })\n\n    casper.waitForUrl(/q=casperjs/, function() {\n      (/casperjs/).should.matchTitle\n    })\n  })\n})\n````\n\n## How to use\n\n`mocha-casperjs` is still in active development against the latest `casperjs` and since a couple of issues have arose that required patches, please use the [latest version of casperjs](http://docs.casperjs.org/en/latest/installation.html#from-the-master-branch), if not at least >= 1.1.0-beta3.\n\n````\nnpm install -g mocha-casperjs\nmocha-casperjs\n````\n\nLike Mocha, if you place your tests in the `test` or `tests` directory, it will find them and run them. You can also specify tests to run individually instead.\n\n## Additional Conveniences\n\nIf [chai][] is discovered (it must be installed adjacent to mocha-casperjs), it will automatically use the `should` style as well as expose `expect` globally.\n\nIf [casper-chai][] is discovered, it will be used with chai.\n\nThe [selectXPath](http://casperjs.readthedocs.org/en/latest/selectors.html#index-2) casper helper method is exposed globally as `xpath`.\n\n## Command Line Options\n\nIn addition to specifying options on the command line, you can add them to a `mocha-casperjs.opts` [like mocha.opts](http://visionmedia.github.io/mocha/#mocha.opts), except it looks for this file in the current directory.\n\n````\n--reporter\n--timeout\n--grep\n--ui\n--invert\n--no-color\n--slow\n````\n\nThese are all [Mocha command line options](http://visionmedia.github.io/mocha/#usage) that mocha-casperjs supports. Currently the default timeout is 30 seconds, not two, as writing end to end tests takes more time.\n\nNote the CasperJS cli parser does not support shorthands or spaces between parameters. So rather than `-g foo` and `--grep foo`, use `--grep=foo`\n\n`--casper-timeout=<timeout in ms>`\n\nSet Casper's timeout. Defaults to 5 seconds. You will want this less than Mocha's.\n\n`--file=<file>`\n\nPipe reporter output to the specified file instead of standard out. Use this if you have to filter out console messages from reporter output, like for `json`, `xunit`, etc. type of reporters\n\n`--mocha-path=<path>`\n\nLoad [Mocha][] from the specified path, otherwise look for it adjacent to mocha-casperjs\n\n`--chai-path=<path>`\n\nLoad [Chai][] from the specified path, otherwise look for it adjacent to mocha-casperjs\n\n`--casper-chai-path=<path>`\n\nLoad [casper-chai][] from the specified path, otherwise look for it adjacent to mocha-casperjs\n\n### CasperJS options\n\nAlso, you can add [CasperJS options](http://docs.casperjs.org/en/latest/modules/casper.html#index-1) to `mocha-casperjs.opts`. Below are the supported options:\n\n````\n--user-agent\n--viewport-width\n--viewport-height\n````\n\n`--user-agent=<userAgent>`\n\nSets the `User-Agent` string (like `Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)`) to send through headers when performing requests. \n\n`--viewport-width=<pixels> --viewport-height=<pixels>`\n\nSets the `PhantomJS` viewport to custom size. Useful for testing media queries and capturing screenshots:\n\n```\ncasper.on('load.finished', function (resource) {\n  this.captureSelector(screenshots_path + 'body.png', 'body');\n});\n```\n\n## Custom 3rd party Reporters\n\nYou can provide your own reporter via the `--reporter` flag. mocha-phantomjs will try to `require` the module and load it. Some things to take note of:\n\n- Both node modules and script files can be required, so for relative paths to scripts, make sure they start with '.'. E.g. use `--reporter=./foo` to load `foo.js` that is in the current directory. CoffeeScript files can be directly required too, as phantomjs has coffeescript built in.\n- PhantomJS is not node.js. You won't have access to standard node modules like `url`, `http`, etc. Refer to [PhantomJS's built in modules](https://github.com/ariya/phantomjs/wiki/API-Reference#wiki-module-api). However, mocha-casperjs does provide a very minimalistic `process` shim to PhantomJS's `system` module.\n- If you want access to built-in Mocha reporters, they are available on `Mocha.reporters`. For example, `Mocha.reporters.Base`.\n\n## How it works\n\nmocha-casperjs is a big conglomeration of various ideas and approaches.\n- It patches Mocha's `Runnable` to have every runabble be async and flush the casper tests - an approach taken from [mocha-as-promised][].\n- It replaces `Mocha.process.stdout` with phantom's, including formatting - an approach taken from [mocha-phantomjs][]\n- It attaches to Casper error events and fails the test with the last error that occoured.\n\n[CasperJS]: http://casperjs.org/\n[Chai]: http://chaijs.com/\n[Mocha]: http://visionmedia.github.com/mocha/\n[mocha-as-promised]: http://github.com/domenic/mocha-as-promised\n[mocha-phantomjs]: http://github.com/metaskills/mocha-phantomjs\n[casper-chai]: https://github.com/brianmhunt/casper-chai\n[npm]: https://npmjs.org/\n[Tester]: http://casperjs.org/api.html#tester\n[slimerjs]: http://www.slimerjs.org/\n[phantomjs]: http://www.phantomjs.org/\n",
  "homepage": "https://github.com/nathanboktae/mocha-casperjs",
  "_id": "mocha-casperjs@0.4.1",
  "_from": "mocha-casperjs@"
}
